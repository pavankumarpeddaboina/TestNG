package maven.selenium1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Iterator;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Readdatafromexcel {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		
		
//		File file = new File("C:\\Users\\DELL E3470\\Downloads\\pavan\\kinnu_workspace\\selenium1\\ExcelFiles\\Test3.xlsx");
//		FileInputStream fis = new FileInputStream(file);
//		XSSFWorkbook workbook = new XSSFWorkbook(fis);
//		XSSFSheet sheet = workbook.getSheetAt(0);
//		String cellvalue  = sheet.getRow(0).getCell(0).getStringCellValue();
//	  sheet.getRow(1).getCell(1).getStringCellValue();
//		System.out.println(cellvalue);
//		
//		workbook.close();
//		fis.close();
		
		
		 
		
		File file = new File("C:\\Users\\DELL E3470\\Downloads\\pavan\\kinnu_workspace\\selenium1\\ExcelFiles\\Test3.xlsx");
		FileInputStream fis = new FileInputStream(file);
		XSSFWorkbook workbook = new XSSFWorkbook(fis);
		XSSFSheet sheet = workbook.getSheetAt(0);
//		String cellvalue  = sheet.getRow(0).getCell(0).getStringCellValue();
//	  sheet.getRow(1).getCell(1).getStringCellValue();
//		System.out.println(cellvalue);
		
	int rowcount = sheet.getPhysicalNumberOfRows();
	for (int i = 0; i < rowcount; i++) {
		XSSFRow row = sheet.getRow(i);
		
		
		int cellcount = row.getPhysicalNumberOfCells();
		for (int j = 0; j <  cellcount; j++) {
			
			XSSFCell cell = row.getCell(j);
			String cellvalue = getCellValue(cell);
			System.out.print("||"+cellvalue);
			
		}
		
		System.out.println();
		
	}
		
		
		workbook.close();
		fis.close();

	}
	
	public static String  getCellValue(XSSFCell Cell) {
		switch (Cell.getCellType()) {
		case NUMERIC:
			return String.valueOf(Cell.getNumericCellValue());
			
		case BOOLEAN:
			return String.valueOf(Cell.getBooleanCellValue());
			
		case STRING:
			return Cell.getStringCellValue();
			
		default:
			return Cell.getStringCellValue();
		}
	}

}
